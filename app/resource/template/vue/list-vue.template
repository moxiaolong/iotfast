<template>
{{$lens := .table.Columns|len}}
{{$businessName := .table.BusinessName | CaseCamelLower}}
  <div class="app-container">
  	<el-card shadow="hover">
    <div class="{{$businessName}}-search mb15">
    <el-form :inline="true" size="default" label-width="68px">
    {{range $index, $column := .table.Columns}}
    {{if and (eq $column.IsQuery "1") (ne $column.ColumnName "created_by") (ne $column.ColumnName "updated_by") (ne $column.ColumnName "created_at") (ne $column.ColumnName "updated_at") (ne $column.ColumnName "deleted_at")}}
    {{if eq $column.HtmlType "input" "textarea"}}
      <el-form-item label="{{$column.ColumnComment | TrimSpecial}}" prop="{{$column.HtmlField}}">
        <el-input
            v-model="queryParams.{{$column.HtmlField}}"
            placeholder="请输入{{$column.ColumnComment}}"
            clearable
            @keyup.enter.native="handleQuery"
        />
      </el-form-item>
      {{else if and (eq $column.HtmlType "select" "radio" "checkbox") (ne $column.DictType "") }}
      <el-form-item label="{{$column.ColumnComment| TrimSpecial}}" prop="{{$column.HtmlField}}">
        <el-select v-model="queryParams.{{$column.HtmlField}}" placeholder="请选择{{$column.ColumnComment}}" clearable >
            <div v-if="{{$column.HtmlField}}Options != undefined && {{$column.HtmlField}}Options.length > 1">
            <el-option
                v-for="dict in {{$column.HtmlField}}Options"
                :key="dict.key"
                :label="dict.value"
                :value="dict.key"
            />
            </div>
            <div v-else>
            <el-option label="暂停"  :value="1"/>
            <el-option label="正常"  :value="0"/>
            </div>
        </el-select>
      </el-form-item>
      {{else if eq $column.HtmlType "datetime"}}
      <el-form-item label="{{$column.ColumnComment| TrimSpecial}}" prop="{{$column.HtmlField}}">
        <el-date-picker
            clearable style="width: 200px"
            v-model="queryParams.{{$column.HtmlField}}"
            type="date"
            value-format="yyyy-MM-dd"
            placeholder="选择{{$column.ColumnComment}}">
        </el-date-picker>
      </el-form-item>
      {{else if and (eq $column.HtmlType "select" "radio" "checkbox") (ne $column.LinkTableName "")}}
        <el-form-item label="{{$column.ColumnComment| TrimSpecial}}" prop="{{$column.HtmlField}}">
          <el-select v-model="queryParams.{{$column.HtmlField}}" placeholder="请选择{{$column.ColumnComment}}" clearable >
              <el-option
                  v-for="item in {{$column.HtmlField}}Options"
                  :key="item.key"
                  :label="item.value"
                  :value="item.key"
              />
          </el-select>
        </el-form-item>
        {{else}}
        <el-form-item label="{{$column.ColumnComment| TrimSpecial}}" prop="{{$column.HtmlField}}">
          <el-select v-model="queryParams.{{$column.HtmlField}}" placeholder="请选择{{$column.ColumnComment}}" clearable>
              <el-option label="请选择字典生成" value="" />
          </el-select>
        </el-form-item>
      {{end}}
      {{end}}
      {{end}}
      <el-form-item>
        <el-button type="primary" 
        @click="handleQuery">
        <el-icon>
            <ele-Search />
          </el-icon>
        查询</el-button>
 </el-form-item>
        <el-form-item style="vertical-align: top;">
        <el-button
         @click="resetQuery">
         <el-icon>
            <ele-Refresh />
          </el-icon>
         重置</el-button>
             </el-form-item>
    </el-form>

         <el-row :gutter="10" class="mb8">
        <el-col :span="1.5">
        <el-button
          type="primary"
          @click="handleAdd">
         <el-icon>
            <ele-FolderAdd />
          </el-icon>
          新增</el-button>

         </el-col>
        <el-col :span="1.5">
        <el-button
          type="success"
          :disabled="single"
          @click="handleUpdate">
          <el-icon>
            <ele-Edit />
        </el-icon>
        修改</el-button>

         </el-col>
        <el-col :span="1.5">
        <el-button
          type="danger"
          :disabled="multiple"
          @click="handleDelete">
         <el-icon>
            <ele-Delete />
          </el-icon>
          删除</el-button>
             </el-col>
         </el-row>
    	</div>
   </el-card>
   <el-table v-loading="loading" :data="{{$businessName}}List" @selection-change="handleSelectionChange" style="width: 100%">
  <el-table-column type="selection" width="55" align="center" />
  {{range $index, $column := .table.Columns}}
  {{if eq $column.IsPk "1"}}
  <el-table-column label="{{$column.ColumnComment| TrimSpecial}}" align="center" prop="{{$column.HtmlField}}" />
  {{else if and (eq $column.IsList "1") (eq $column.HtmlType "datetime")}}
  <el-table-column label="{{$column.ColumnComment| TrimSpecial}}" align="center" prop="{{$column.HtmlField}}" width="180"/>
  {{else if and (eq $column.IsList "1") (HasSuffix $column.ColumnName "status")}}
  <el-table-column label="{{$column.ColumnComment| TrimSpecial}}" align="center">
    <template  #default="scope">
        <el-switch v-model="scope.row.{{$column.HtmlField}}" :active-value="1" :inactive-value="0" inline-prompt active-text="启" inactive-text="禁" @change="handle{{$column.HtmlField}}Change(scope.row)" ></el-switch>
    </template>
  </el-table-column>
  {{else if ne $column.LinkTableName ""}}
  <el-table-column label="{{$column.ColumnComment| TrimSpecial}}" align="center" prop="{{$column.HtmlField}}" :formatter="{{$column.HtmlField}}Format" width="100">
    <template  #default="scope">
      {{VueTag "{{" }} {{$column.HtmlField}}Format(scope.row) {{VueTag "}}" }}
    </template>
  </el-table-column>
  {{else if and (eq $column.IsList "1") (ne $column.DictType "")}}
  <el-table-column label="{{$column.ColumnComment| TrimSpecial}}" align="center" prop="{{$column.HtmlField}}" :formatter="{{$column.HtmlField}}Format" />
  {{else if and (eq $column.IsList "1") (ne $column.HtmlField "")}}
  <el-table-column label="{{$column.ColumnComment| TrimSpecial}}" align="center" prop="{{$column.HtmlField}}" />
  {{end}}{{end}}
  <el-table-column label="操作" align="center" class-name="small-padding fixed-width">
    <template  #default="scope">
      <el-button
        type="text"
        class="no_padding" size="small" 
        @click="handleUpdate(scope.row)"
      >修改</el-button>
      <el-button
        type="text"
        class="no_padding" size="small" 
        @click="handleDelete(scope.row)"
      >删除</el-button>
    </template>
  </el-table-column>
</el-table>
<pagination
  v-show="total>0"
  :total="total"
  v-model:page="queryParams.pageNum"
  v-model:limit="queryParams.pageSize"
  @pagination="{{$businessName}}List"
/>


    <!-- 添加或修改{{.table.FunctionName}}对话框 -->
     <el-dialog :title="title"  v-model="open" width="769px">
        <template #header>
            <div > {{"{"}}{{"{title}"}}{{"}"}}</div>
        </template>
        <el-form :model="ruleForm" ref="formRef" :rules="rules" size="default" label-width="120px">
            {{range $index, $column := .table.Columns}}
            {{if and (eq $column.IsInsert "1") (ne $column.IsPk "1")}}
            {{if and (eq $column.HtmlType "input") (eq $column.IsEdit "1")}}
            <el-form-item label="{{$column.ColumnComment| TrimSpecial}}" prop="{{$column.HtmlField}}">
                <el-input v-model="ruleForm.{{$column.HtmlField}}" placeholder="请输入{{$column.ColumnComment}}" />
            </el-form-item>
            {{else if eq $column.HtmlType "select" }}
              {{if ne $column.LinkTableName ""}}
              <el-form-item label="{{$column.ColumnComment| TrimSpecial}}" prop="{{$column.HtmlField}}">
                  <el-select v-model="ruleForm.{{$column.HtmlField}}" placeholder="请选择{{$column.ColumnComment}}">
                      <el-option
                          v-for="item in {{$column.HtmlField}}Options"
                          :key="item.key"
                          :label="item.value"
                          :value="item.key"
                      ></el-option>
                  </el-select>
              </el-form-item>
              {{else if ne $column.DictType ""}}
              <el-form-item label="{{$column.ColumnComment| TrimSpecial}}" prop="{{$column.HtmlField}}">
                  <el-select v-model="ruleForm.{{$column.HtmlField}}" placeholder="请选择{{$column.ColumnComment}}">
                      <el-option
                          v-for="dict in {{$column.HtmlField}}Options"
                          :key="dict.key"
                          :label="dict.value"
                          {{if eq $column.GoType "Integer"}}
                          :value="parseInt(dict.key)"
                          {{else}}
                              :value="dict.key"
                          {{end}}
                      ></el-option>
                  </el-select>
              </el-form-item>
              {{else}}
              <el-form-item label="{{$column.ColumnComment| TrimSpecial}}" prop="{{$column.HtmlField}}">
                  <el-select v-model="ruleForm.{{$column.HtmlField}}" placeholder="请选择{{$column.ColumnComment}}">
                      <el-option label="请选择字典生成" value="" />
                  </el-select>
              </el-form-item>
              {{end}}
              {{else if eq $column.HtmlType "radio" }}
              {{if ne $column.DictType ""}}
               <el-form-item label="{{$column.ColumnComment| TrimSpecial}}" prop="{{$column.HtmlField}}">
                   <el-radio-group v-model="ruleForm.{{$column.HtmlField}}">
                       <el-radio
                        v-for="dict in {{$column.HtmlField}}Options"
                        :key="dict.key"
                        :label="dict.key"
                       >{{ VueTag "{{" }}dict.value {{VueTag "}}"}}</el-radio>
                   </el-radio-group>
               </el-form-item>
               {{else}}
               <el-form-item label="{{$column.ColumnComment| TrimSpecial}}" prop="{{$column.HtmlField}}">
                   <el-radio-group v-model="ruleForm.{{$column.HtmlField}}">
                       <el-radio label="1">请选择字典生成</el-radio>
                   </el-radio-group>
               </el-form-item>
               {{end}}
               {{else if eq $column.HtmlType "datetime"}}
               <el-form-item label="{{$column.ColumnComment| TrimSpecial}}" prop="{{$column.HtmlField}}">
                   <el-date-picker clearable  style="width: 200px"
                       v-model="ruleForm.{{$column.HtmlField}}"
                       type="date"
                       value-format="yyyy-MM-dd"
                       placeholder="选择{{$column.ColumnComment}}">
                   </el-date-picker>
               </el-form-item>
               {{else if eq $column.HtmlType "textarea"}}
               <el-form-item label="{{$column.ColumnComment| TrimSpecial}}" prop="{{$column.HtmlField}}">
                   <el-input v-model="ruleForm.{{$column.HtmlField}}" type="textarea" placeholder="请输入{{$column.ColumnComment}}" />
               </el-form-item>
               {{else if eq $column.HtmlType "checkbox" }}
                <el-form-item label="{{$column.ColumnComment| TrimSpecial}}" prop="{{$column.HtmlField}}">
                   <el-checkbox-group v-model="ruleForm.{{$column.HtmlField}}">
                      <el-checkbox
                        v-for="dict in {{$column.HtmlField}}Options"
                        :key="dict.key"
                        :label="dict.key"
                      >{{ VueTag "{{" }}dict.value {{VueTag "}}"}}</el-checkbox>
                   </el-checkbox-group>
                </el-form-item>
               {{else if eq $column.HtmlType "richtext"}}
                <el-form-item label="{{$column.ColumnComment| TrimSpecial}}">
                  <Editor ref="cke" v-model="ruleForm.{{$column.HtmlField}}" @setEditContent="set{{$column.GoField}}EditContent"/>
                </el-form-item>
            {{end}}
            {{end}}
            {{end}}
        </el-form>
        <template #footer>
            <span class="dialog-footer">
                <el-button @click="handleCancel" size="default">取 消</el-button>
                <el-button type="primary" @click="submitForm" size="default">确 定</el-button>
            </span>
        </template>
    </el-dialog>

  </div>
</template>

<script lang="ts">

import { ElMessage, ElMessageBox, FormInstance } from 'element-plus';
import { defineComponent, getCurrentInstance, onMounted, reactive, ref, toRefs, unref } from 'vue';

{{$plugin:=""}}
{{if ContainsI $.table.PackageName "plugins"}}
{{$plugin = "plugins/"}}
{{end}}


import {
    list{{.table.ClassName}},
    get{{.table.ClassName}},
    del{{.table.ClassName}},
    add{{.table.ClassName}},
    update{{.table.ClassName}},
    {{range $index,$column:= .table.Columns}}
    {{if and (HasSuffix $column.ColumnName "status") (eq $column.IsList "1") }}
    change{{$.table.ClassName}}{{$column.GoField}},
    {{end}}
    {{if ne $column.LinkTableName ""}}
    list{{$column.LinkTableClass}},
    {{end}}
    {{end}}
} from "/@/api/{{$plugin}}{{.table.ModuleName}}/{{$businessName}}";


interface {{.table.ClassName}}DataState {
  ids:number[];
  loading:boolean;
// 选中表数组
// tableNames: any[];
      // 非单个禁用
  single: boolean;
      // 非多个禁用
  multiple: boolean;
  total: number;
 // {{.table.FunctionName}}表格数据
  {{$businessName}}List: any[],
  title:string;
  open: boolean;
  ruleForm: any;
  queryParams: {
    pageNum: number;
    pageSize: number;{{range $index, $column := .table.Columns}}{{if eq $column.IsQuery "1"}}
    {{$column.HtmlField}}: any{{if ne $lens $index}},{{end}}{{end}}{{end}}
  };
  rules:any;
}

export default defineComponent({
    components:{},
    name: '{{.table.ClassName}}',
    setup() {
      const { proxy } = <any>getCurrentInstance();
      const formRef = ref<HTMLElement | null>(null);
      const state = reactive<{{.table.ClassName}}DataState>( {
      // 遮罩层
      loading: true,
      // 选中数组
      ids: [],
      // 非单个禁用
      single: true,
      // 非多个禁用
      multiple: true,
      // 总条数
      total: 0,
      // {{.table.FunctionName}}表格数据
      {{$businessName}}List: [],
      // 弹出层标题
      title: "",
      // 是否显示弹出层
      open: false,
      {{range $index, $column := .table.Columns}}
      {{if ne $column.DictType ""}}
      // {{$column.HtmlField}}Options字典数据
      {{$column.HtmlField}}Options: [],
      {{else if ne $column.LinkTableName ""}}
      // {{$column.HtmlField}}Options关联表数据
      {{$column.HtmlField}}Options: [],
      {{end}}
      {{end}}
      // 查询参数
      queryParams: {
        pageNum: 1,
        pageSize: 10,{{range $index, $column := .table.Columns}}{{if eq $column.IsQuery "1"}}
        {{$column.HtmlField}}: undefined{{if ne $lens $index}},{{end}}{{end}}{{end}}
      },
      // 表单参数
      ruleForm: {},
      // 表单校验
      rules: { {{range $index, $column := .table.Columns}}{{if eq $column.IsRequired "1"}}
        {{$column.HtmlField}} : [
          { required: true, message: "{{$column.ColumnComment}}不能为空", trigger: "blur" }
        ]{{if ne $lens $index}},{{end}}{{end}}{{end}}
      }
    });
  
    {{$setUpData:=true}}
    {{range $index, $column := .table.Columns}}
    {{if ne $column.LinkTableName ""}}
    //关联{{$column.LinkTableName}}表选项
    const get{{$column.LinkTableClass}}Items =() =>{
      getItems(list{{$column.LinkTableClass}}, {pageSize:10000}).then((res:any) => {
        {{$column.HtmlField}}Options = setItems(res, '{{$column.LinkLabelId}}', '{{$column.LinkLabelName}}')
      })
    };
    {{else if and (HasSuffix $column.ColumnName "status") (eq $column.IsList "1")}}
    // {{$column.ColumnComment}}修改
    const handle{{$column.HtmlField}}Change =(row:any) =>{
      let text = row.{{$column.HtmlField}} === 1 ? "启用" : "停用";
      ElMessageBox.confirm('确认要"' + text + '"：吗?', "警告", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        }).then(function() {
          return change{{$.table.ClassName}}{{$column.GoField}}(row.{{$.table.PkColumn.HtmlField}}, row.{{$column.HtmlField}});
        }).then(() => {
          ElMessage.success(text + "成功");
        }).catch(function() {
            //state.userStatus =row.userStatus === 0 ?1 : 0;
        });
    };
    {{end}}
    {{end}}
    /** 查询{{.table.FunctionName}}列表 */
    const handleGetList = () =>{
      state.loading = true;
      list{{.table.ClassName}}(state.queryParams).then((res:any)=>{
        state.{{$businessName}}List = res.data.list;
        state.total = res.data.total;
        state.loading = false;
      });
    };
    {{range $index, $column := .table.Columns}}
    {{if ne $column.DictType ""}}
    {{if eq $column.HtmlType "checkbox"}}
    // {{$column.ColumnComment}}字典翻译
    {{$column.HtmlField}}Format = (row:any, column:any) =>{
      let {{$column.HtmlField}} = row.{{$column.HtmlField}}.split(",")
      let data = [];
      {{$column.HtmlField}}.map(item=>{
        data.push(selectDictLabel({{$column.HtmlField}}Options, item))
      })
      return data.join(",")
    };
    {{else}}
    // {{$column.ColumnComment}}字典翻译
    {{$column.HtmlField}}Format(row, column) {
      return selectDictLabel({{$column.HtmlField}}Options, row.{{$column.HtmlField}});
    };
    {{end}}
    {{else if ne $column.LinkTableName ""}}
    // {{$column.ColumnComment}}关联表翻译
    {{$column.HtmlField}}Format(row, column) {
      return selectItemsLabel({{$column.HtmlField}}Options, row.{{$column.HtmlField}});
    };
    {{end}}
    {{end}}
    // 取消按钮
    const handleCancel = () =>{
        state.open = false;
        handleReset();
    };
    // 表单重置
    const handleReset = () =>{
        state.ruleForm = {
        {{range $index, $column := .table.Columns}}
        {{if eq $column.HtmlType "radio"}}
        {{$column.HtmlField}}: "0" ,
        {{else if eq $column.HtmlType "checkbox"}}
        {{$column.HtmlField}}: [] ,
        {{else}}
        {{$column.HtmlField}}: undefined,
        {{end}}
        {{end}}
      };
      {{range $index, $column := .table.Columns}}
      {{if eq $column.HtmlType "imagefile"}}
        state.imageUrl{{$column.GoField}} = ''
      {{end}}
      {{end}}
     // resetForm("form");
    };
    /** 搜索按钮操作 */
    const handleQuery = () =>{
        state.queryParams.pageNum = 1;
        handleGetList();
    };
    /** 重置按钮操作 */
    const resetQuery = () =>{
      //resetForm("queryForm");
      handleQuery();
    };
    // 多选框选中数据
    const handleSelectionChange = (selection:any)=>{
        state.ids = selection.map( (item:any) => item.{{.table.PkColumn.HtmlField}})
        state.single = selection.length!=1
        state.multiple = !selection.length
    };
    /** 新增按钮操作 */
    const handleAdd = ()=>{
        handleReset();
        state.open = true;
        state.title = "添加{{.table.FunctionName}}";
    };
    /** 修改按钮操作 */
      const handleUpdate =(row:any)=>{
      handleReset();
      const {{.table.PkColumn.HtmlField}} = row.{{.table.PkColumn.HtmlField}} || state.ids
      get{{.table.ClassName}}({{.table.PkColumn.HtmlField}}).then((res:any)=>{
        let data = res.data;
        {{range $index, $column := .table.Columns}}
        {{if eq $column.HtmlType "checkbox"}}
        data.{{$column.HtmlField}} = data.{{$column.HtmlField}}.split(",")
        {{else if eq $column.HtmlType "radio" "select"}}
        data.{{$column.HtmlField}} = ''+data.{{$column.HtmlField}}
        {{end}}
        {{end}}
        state.ruleForm = data;
        state.open = true;
        state.title = "修改{{.table.FunctionName}}";
      });
    };
    /** 提交按钮 */
    const submitForm = () => {
      //const formWrap = unref(formRef) as any;
      proxy.$refs.formRef.validate((valid: boolean) => {
        if (valid) {
          if (state.ruleForm.{{.table.PkColumn.HtmlField}} != undefined) {
            update{{.table.ClassName}}(state.ruleForm).then((res:any)=>{
              if (res.code === 0) {
                ElMessage.success("修改成功");
                state.open = false;
                handleGetList();
              } else {
                ElMessage.error(res.msg);
              }
            });
          } else {
            add{{.table.ClassName}}(state.ruleForm).then((res:any)=>{
              if (res.code === 0) {
                ElMessage.success("新增成功");
                state.open = false;
                handleGetList();
              } else {
                ElMessage.error(res.msg);
              }
            });
          }
        }
      });
    };
    /** 删除按钮操作 */
    const handleDelete = (row:any)=>{
      const {{.table.PkColumn.HtmlField}}s = row.{{.table.PkColumn.HtmlField}} || state.ids;
      ElMessageBox.confirm('是否确认删除{{.table.FunctionName}}编号为"' + {{.table.PkColumn.HtmlField}}s + '"的数据项?', "警告", {
          confirmButtonText: "确定",
          cancelButtonText: "取消",
          type: "warning"
        }).then(function() {
          return del{{.table.ClassName}}({{.table.PkColumn.HtmlField}}s);
        }).then(() => {
          handleGetList();
          ElMessage.success("删除成功");
        }).catch(function() {});
    };
    // 页面加载时
    onMounted(() => {
        handleGetList();
    });
    return {
            formRef,
              {{range $index, $column := .table.Columns}}
              {{if ne $column.LinkTableName ""}}
                get{{$column.LinkTableClass}}Items,
              {{else if and (HasSuffix $column.ColumnName "status") (eq $column.IsList "1")}}
                handle{{$column.HtmlField}}Change,
              {{end}}
              {{end}}
            handleGetList,
            handleCancel,
            handleReset,
            handleQuery,
            resetQuery,
            handleSelectionChange,
            handleAdd,
            handleUpdate,
            submitForm,
            handleDelete,
            ...toRefs(state),
        };
  }
  });
</script>